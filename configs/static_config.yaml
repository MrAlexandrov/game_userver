components_manager:
    task_processors:                  # Task processor is an executor for coroutine tasks

        main-task-processor:          # Make a task processor for CPU-bound coroutine tasks.
            worker_threads: $worker-threads         # Process tasks in 4 threads.

        fs-task-processor:            # Make a separate task processor for filesystem bound tasks.
            worker_threads: $worker-fs-threads

    default_task_processor: main-task-processor

    components:                       # Configuring components that were registered via component_list
        server:
            listener:                 # configuring the main listening socket...
                port: $server-port            # ...to listen on this port and...
                task_processor: main-task-processor    # ...process incoming requests on this task processor.

        logging:
            fs-task-processor: fs-task-processor
            loggers:
                default:
                    file_path: '@stderr'
                    level: $logger-level
                    overflow_behavior: discard  # Drop logs if the system is too busy to write them down.

        # Dynamic config options. Cache is disabled, updates are disabled.
        dynamic-config:
            # For most of userver dynamic configs, defaults are used, some are overridden here.
            # See userver "dynamic config" docs for what configs exist.
            defaults:
                HTTP_CLIENT_CONNECTION_POOL_SIZE: 1000
                POSTGRES_DEFAULT_COMMAND_CONTROL:
                    network_timeout_ms: 750
                    statement_timeout_ms: 500

        testsuite-support: {}

        congestion-control:

        http-client:
            load-enabled: $is_testing
            fs-task-processor: fs-task-processor

        dns-client:
            fs-task-processor: fs-task-processor

        tests-control:
            load-enabled: $is-testing
            path: /tests/{action}
            method: POST
            task_processor: main-task-processor

        handler-ping:
            path: /ping
            method: GET
            task_processor: main-task-processor
            throttling_enabled: false
            url_trailing_slash: strict-match

        handler-hello:                    # Finally! Our handler.
            path: /hello                  # Registering handler by URL '/hello'.
            method: GET,POST              # It will only reply to GET (HEAD) and POST requests.
            task_processor: main-task-processor  # Run it on CPU bound task processor

        handler-hello-postgres:          # Our postgres handler.
            path: /hello-postgres         # Registering handler by URL '/hello-postgres'.
            method: GET,POST              # It will only reply to GET (HEAD) and POST requests.
            task_processor: main-task-processor  # Run it on CPU bound task processor

# My CRUD's
        handler-create-pack:
            path: /create-pack
            method: POST

        handler-get-pack:
            path: /get-pack
            method: GET

        handler-get-all-packs:
            path: /get-all-packs
            method: GET

        handler-create-question:
            path: /create-question
            method: POST

        handler-get-question-by-id:
            path: /get-question-by-id
            method: GET

        handler-get-questions-by-pack-id:
            path: /get-questions-by-pack-id
            method: GET

        handler-create-variant:
            path: /create-variant
            method: POST

        handler-get-variant-by-id:
            path: /get-variant-by-id
            method: GET

        handler-get-variants-by-question-id:
            path: /get-variants-by-question-id
            method: GET

        postgres-db-1:
            dbconnection: $pg-connection
            dbconnection#env: DB_CONNECTION
            blocking_task_processor: fs-task-processor
            dns_resolver: async
            sync-start: true
            connlimit_mode: manual

        grpc-server:
            # The single listening port for incoming RPCs
            port: $grpc-server-port
            completion-queue-count: 3

        handler-hello-grpc:
            task-processor: main-task-processor
